// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"context"
	http2 "github.com/mehmetkmrc/ator_gold/internal/adapter/primary/http"
	"github.com/mehmetkmrc/ator_gold/internal/adapter/primary/rabbit"
	"github.com/mehmetkmrc/ator_gold/internal/adapter/secondary/auth/paseto"
	"github.com/mehmetkmrc/ator_gold/internal/adapter/secondary/config"
	"github.com/mehmetkmrc/ator_gold/internal/adapter/secondary/storage/psql"
	"github.com/mehmetkmrc/ator_gold/internal/core/port/auth"
	"github.com/mehmetkmrc/ator_gold/internal/core/port/db"
	"github.com/mehmetkmrc/ator_gold/internal/core/port/http"
	"github.com/mehmetkmrc/ator_gold/internal/core/port/user"
	"github.com/mehmetkmrc/ator_gold/internal/core/service"
	"github.com/rabbitmq/amqp091-go"
	"go.uber.org/zap"
	"sync"
)

// Injectors from wire.go:

func InitApp(ctx context.Context, wg *sync.WaitGroup, rw *sync.RWMutex, cfg *config.Container) (*App, func(), error) {
	connection, cleanup, err := rabbitMQFunc(ctx, cfg)
	if err != nil {
		return nil, nil, err
	}
	engineMaker, cleanup2, err := dbEngineFunc(ctx, cfg)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	userRepositoryPort := psql.NewUserRepository(engineMaker)
	tokenMaker, err := paseto.NewPaseto(cfg)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	userServicePort := service.NewUserService(userRepositoryPort, tokenMaker)
	serverMaker, cleanup3, err := httpServerFunc(ctx, cfg, userServicePort, tokenMaker)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	app := New(rw, wg, cfg, connection, serverMaker, engineMaker, tokenMaker, userRepositoryPort, userServicePort)
	return app, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

func dbEngineFunc(
	ctx context.Context,
	Cfg *config.Container,
) (db.EngineMaker, func(), error) {
	psqlDb := psql.NewMSDB(Cfg)
	err := psqlDb.Start(ctx)
	if err != nil {
		zap.S().Fatal("failed to start db:", err)
	}

	return psqlDb, func() { psqlDb.Close(ctx) }, nil
}

func httpServerFunc(
	ctx context.Context,
	Cfg *config.Container, user2 user.UserServicePort,

	token auth.TokenMaker,
) (http.ServerMaker, func(), error) {
	httpServer := http2.NewHTTPServer(ctx, Cfg, user2, token)
	httpServer.Start(ctx)
	return httpServer, func() { httpServer.Close(ctx) }, nil
}

func rabbitMQFunc(
	ctx context.Context,
	Cfg *config.Container,
) (*amqp091.Connection, func(), error) {
	conn, err := rabbitmq.NewRabbitMQConn(Cfg)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}
